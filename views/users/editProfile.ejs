<% layout("./layouts/boilerplate") %>
<link rel="stylesheet" href="/stylesheets/profile.css">

<% console.log('User Data:', user); %> <!-- Log the user data -->



  <!-- here is the general form -->
  <form action="/profile/<%= user._id %>/edit" method="POST" novalidate enctype="multipart/form-data">

    <div class="row">
      <div class="col-md-2">
        <div class="avatar-edit-container sticky-avatar">
          <div class="avatar-profile-container">
            <img id="avatar-preview"  src="<%= user.avatar.url %>" alt="Avatar of <%= user.username %>" class="avatar-profile">
          </div>
          <div class="form-file custom-file">
            <label class="form-file-label" for="avatar">
              <span class="form-file-button-edit-avatar">
                <i class="fa-solid fa-camera" style="color: #000000;"></i>
                <span class="edit-text">Edit</span>
              </span>
            </label>
            <input type="file" class="form-file-input" id="avatar" name="avatar" style="display: none;">
          </div>
        </div>
      </div>


      <div class="col-md-10">
        <p class="edit-profile-title">Your Profile</p>

        <div class="row">
          <div class="col-md-6">
            <div class="left-edit-userProfile-container">
              <input class="form-control profile-field  type="text" name="user[username]" id="username" value="<%= user.username %>" required style="display: none;">
              <button type="button" class="btn btn-outline-secondary edit-profile-button" data-bs-toggle="modal" data-bs-target="#usernameModal">
                <div class="flex-container">
                  <i class="fa-solid fa-user edit-profile-icon"></i>
                  <div>
                    My name is: <span id="generalUsername"><%= user.username %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow"></i>
                </div>
              </button>
            </div>
          </div>

          <div class="col-md-6">
            <div class="right-edit-userProfile-container">
              <input class="form-control profile-field" type="email" name="user[email]" id="email" value="<%= user.email %>" required style="display: none;">
              <button type="button" class="btn edit-profile-button" data-bs-toggle="modal" data-bs-target="#emailModal">
                <div class="flex-container">
                  <i class="fa-solid fa-envelope edit-profile-icon"></i>
                  <div>
                    My email is: <span id="generalEmail"><%= user.email %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-md-6">
            <div class="left-edit-userProfile-container">
              <input class="form-control" type="date" name="user[birthDate]" id="birthDate" value="<%= user.birthDate ? user.birthDate.toISOString().substr(0, 10) : '' %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#birthDateModal">
                <div class="flex-container">
                  <i class="fa-solid fa-cake-candles edit-profile-icon"></i>
                  <div>
                    I was born in: <span id="generalBirthDate"><%= user.birthDate ? user.birthDate.toISOString().substr(0, 10) : '' %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                 </div>
              </button>
            </div>
          </div>

          <div class="col-md-6">
            <div class="right-edit-userProfile-container">
              <input class="form-control" type="text" name="user[work]" id="work" value="<%= user.work %>" required style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#workModal">
                <div class="flex-container">
                  <i class="fa-solid fa-briefcase edit-profile-icon"></i>
                  <div>
                    My work: <span id="generalWork"><%= user.work %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-md-6">
            <div class="left-edit-userProfile-container">
              <input class="form-control" type="text" name="user[funFact]" id="funFact" value="<%= user.funFact %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#funFactModal">
                <div class="flex-container">
                  <i class="fa-solid fa-lightbulb edit-profile-icon"></i>
                  <div>
                    My fun fact: <span id="generalFunFact"><%= user.funFact %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>

          <div class="col-md-6">
            <div class="right-edit-userProfile-container">
              <input class="form-control" type="text" name="user[favoriteSong]" id="favoriteSong" value="<%= user.favoriteSong %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#favoriteSongModal">
                <div class="flex-container">
                  <i class="fa-solid fa-music edit-profile-icon"></i>
                  <div>
                    My favorite song: <span id="generalFavoriteSong"><%= user.favoriteSong %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>
        </div>


        <div class="row">
          <div class="col-md-6">
            <div class="left-edit-userProfile-container">
              <input class="form-control" type="text" name="user[uselessSkill]" id="uselessSkill" value="<%= user.uselessSkill %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#uselessSkillModal">
                <div class="flex-container">
                  <i class="fa-solid fa-wand-magic-sparkles edit-profile-icon"></i>
                  <div>
                    My most useless skill: <span id="generalUselessSkill"><%= user.uselessSkill %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>

          <div class="col-md-6">
            <div class="right-edit-userProfile-container">
              <input class="form-control" type="text" name="user[school]" id="school" value="<%= user.school %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#schoolModal">
                <div class="flex-container">
                  <i class="fa-solid fa-graduation-cap edit-profile-icon"></i>
                  <div>
                   Where I went to school: <span id="generalSchool"><%= user.school %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>
        </div>


        <div class="row">
          <div class="col-md-6">
            <div class="left-edit-userProfile-container">
              <input class="form-control" type="text" name="user[spendingHabit]" id="spendingHabit" value="<%= user.spendingHabit %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#spendingHabitModal">
                <div class="flex-container">
                  <i class="fa-regular fa-clock edit-profile-icon"></i>
                  <div>
                    I spend too much time: <span id="generalSpendingHabit"><%= user.spendingHabit %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>

          <div class="col-md-6">
            <div class="right-edit-userProfile-container">
              <input class="form-control" type="text" name="user[biographyTitle]" id="biographyTitle" value="<%= user.biographyTitle %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#biographyTitleModal">
                <div class="flex-container">
                  <i class="fa-solid fa-book edit-profile-icon"></i>
                  <div>
                    My biography title would be: <span id="generalBiographyTitle"><%= user.biographyTitle %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>
        </div>


        <div class="row">
          <div class="col-md-6">
            <div class="left-edit-userProfile-container">
              <input class="form-control" type="text" name="user[obsession]" id="obsession" value="<%= user.obsession %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#obsessionModal">
                <div class="flex-container">
                  <i class="fa-solid fa-heart edit-profile-icon"></i>
                  <div>
                    I'm obsessed with: <span id="generalObsession"><%= user.obsession %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>

          <div class="col-md-6">
            <div class="right-edit-userProfile-container">
              <input class="form-control" type="text" name="user[languages]" id="languages" value="<%= user.languages %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#languagesModal">
                <div class="flex-container">
                  <i class="fa-solid fa-globe edit-profile-icon"></i>
                  <div>
                    Languages I speak: <span id="generalLanguages"><%= user.languages %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>
        </div>


        <div class="row">
          <div class="col-md-6">
            <div class="left-edit-userProfile-container">
              <input class="form-control" type="text" name="user[location]" id="location" value="<%= user.location %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#locationModal">
                <div class="flex-container">
                  <i class="fa-solid fa-earth-europe edit-profile-icon"></i>
                  <div>
                    Where I live: <span id="generalLocation"><%= user.location %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>

          <div class="col-md-6">
            <div class="right-edit-userProfile-container">
              <input class="form-control" type="text" name="user[pets]" id="pets" value="<%= user.pets %>" style="display: none;">
              <button type="button" class="btn btn-outline-secondary  edit-profile-button" data-bs-toggle="modal" data-bs-target="#petsModal">
                <div class="flex-container">
                  <i class="fa-solid fa-paw edit-profile-icon"></i>
                  <div>
                    Pets: <span id="generalPets"><%= user.pets %></span>
                  </div>
                  <i class="fa-solid fa-chevron-right edit-profile-arrow""></i>
                </div>
              </button>
            </div>
          </div>
        </div>

        <div class="form-group about-you-container">
          <h2 for="aboutYou">About You</h2>
          <div id="introDisplay">
            <div class="intro-text-container">
              <div id="introTextDisplay"></div>
              <a href="javascript:void(0);" id="readMoreLink" class="btn-link" style="display: none;">Read more</a>
              <a href="javascript:void(0);" id="readLessLink" class="btn-link" style="display: none;">Read less</a>
            </div>
            <label id="emptyTextareaLabel" style="display: none;">Write something fun and punchy.</label>
            <a href="#" id="addIntroLink" class="btn-link" data-modal-input="modalIntroduction">Add Intro</a>
            <a href="#" id="editIntroLink" class="btn-link" data-modal-input="modalIntroduction" style="display: none;">Edit Intro</a>
          </div>

          <textarea
            class="form-control about-you-text-container"
            id="aboutYou"
            name="user[aboutYou]"
            rows="4"
            placeholder="Write something fun and punchy."
            style="display: none;"
          ><%= user.aboutYou %></textarea>

        </div>

          <div class="updateButtonContainer">
            <button class="btn text-white submit-generalForm-button">Done</button>
          </div>
        </div>
      </div>
    </div>
  </form>
  <div class="Back-To-Profile-Container">
    <a class="Back-To-Profile-Link" href="/profile/<%= user._id %>"><i class="fa-solid fa-circle-arrow-left" style="color: #000000;"></i> Back to Profile</a>
  </div>


  <div id="modalContainer"></div>


<script>

  document.addEventListener('DOMContentLoaded', function () {
    console.log('DOMContentLoaded event fired');
    // JavaScript code to update the avatar preview
    const avatarInput = document.getElementById('avatar');
    const avatarPreview = document.getElementById('avatar-preview');
    const editSpan = document.querySelector('.form-file-button-edit-avatar');



    avatarInput.addEventListener('change', (event) => {
      const selectedFile = event.target.files[0];

      if (selectedFile) {
        // Create a URL for the selected image
        const objectURL = URL.createObjectURL(selectedFile);

        // Hide the "Edit" span
        editSpan.style.display = 'none';

        // Add a class to make the previous avatar image more transparent
        avatarPreview.classList.add('avatar-fade-out');

        // Apply the border animation class
        avatarPreview.classList.add('avatar-border-animation');

        // Delay for 1 second (adjust the time as needed)
        const delayMilliseconds = 1000;

        setTimeout(() => {
          // Update the src attribute of the avatar preview
          avatarPreview.src = objectURL;

          // Remove the class to reset the opacity
          avatarPreview.classList.remove('avatar-fade-out');
          // Display the "Edit" span again
          editSpan.style.display = 'inline-block';

          // Remove the border animation class
          avatarPreview.classList.remove('avatar-border-animation');

        }, delayMilliseconds);
      }
    });

     // Define modal data
    const modals = [
      {
        id: 'usernameModal',
        title: 'Your Username',
        label: 'What is your name or nickname?',
        inputId: 'modalUsername',
        value: '<%= user.username %>',
        maxLength: 40,
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'emailModal',
        title: ' Your Email',
        label: 'What is your email?',
        inputId: 'modalEmail',
        value: '<%= user.email %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'birthDateModal',
        title: 'When did you born?',
        label: 'This is one of the most important days in your live and we would love very much to know it!',
        inputId: 'modalBirthDate',
        value: '<%= user.birthDate ? user.birthDate.toISOString().substr(0, 10) : "" %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'workModal',
        title: 'What do you do for work?',
        label: 'Tell us what your profession is or what is your life’s calling.',
        inputId: 'modalWork',
        value: '<%= user.work %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'funFactModal',
        title: 'What’s a fun fact about you?',
        label: 'Share something unique or unexpected about you. Example: I was in a music video or I’m a juggler.',
        inputId: 'modalFunFact',
        value: '<%= user.funFact %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'favoriteSongModal',
        title: 'What is your favorite song?',
        label: 'Share with us your favorite song or music band.',
        inputId: 'modalFavoriteSong',
        value: '<%= user.favoriteSong %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'uselessSkillModal',
        title: 'What’s your most useless skill?',
        label: 'Share a surprising but pointless talent you have. Example: Shuffling cards with one hand.',
        inputId: 'modalUselessSkill',
        value: '<%= user.uselessSkill %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'schoolModal',
        title: 'Where did you go to school?',
        label: 'Share with us the school that made you who you are. It could be your home school, secondary school or university.',
        inputId: 'modalSchool',
        value: '<%= user.school %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'spendingHabitModal',
        title: 'What do you spend too much time doing?',
        label: 'Share an activity or hobby you spend lots of free time on. Example: Watching cat videos or playing chess.',
        inputId: 'modalSpendingHabit',
        value: '<%= user.spendingHabit %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'biographyTitleModal',
        title: 'What would your biography title be?',
        label: 'If someone wrote a book about your life, what would they call it?',
        inputId: 'modalBiographyTitle',
        value: '<%= user.biographyTitle %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'obsessionModal',
        title: 'What are you obsessed with?',
        label: 'Share whatever you can’t get enough of – in a good way. Example: Baking rosemary focaccia.',
        inputId: 'modalObsession',
        value: '<%= user.obsession %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'languagesModal',
        title: 'Languages you speak',
        label: 'What languages do you speak?',
        inputId: 'modalLanguages',
        value: '<%= user.languages %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'locationModal',
        title: 'Where you live?',
        label: 'What city or country do you live in?',
        inputId: 'modalLocation',
        value: '<%= user.location %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'petsModal',
        title: 'Do you have any pets in your life?',
        label: 'Share any pets you have and their names. Example: My calico cat Whiskers or my speedy tortoise Leonardo.',
        inputId: 'modalPets',
        value: '<%= user.pets %>',
        inputClass: 'input-form', // Add class for input field
        counterClass: 'modal-character-count', // Add class for character count
      },
      {
        id: 'introModal', // Unique ID for the introduction modal
        title: 'Edit Introduction', // Title for the modal
        label: 'Introduction', // Label for the input field
        inputId: 'modalIntroduction', // Unique input ID for the introduction modal
        value: '<%= user.introduction %>', // Initial value for the input field
        inputClass: 'input-form', // Add class for the input field
        counterClass: 'modal-character-count', // Add class for character count
        maxLength: 500, // Set the maximum length if needed
      },
    ];



    const inputIdMapping = {
      modalUsername: 'username',
      modalEmail: 'email',
      modalBirthDate: 'birthDate',
      modalWork: 'work',
      modalFunFact: 'funFact',
      modalFavoriteSong: 'favoriteSong',
      modalUselessSkill: 'uselessSkill',
      modalSchool: 'school',
      modalSpendingHabit: 'spendingHabit',
      modalBiographyTitle: 'biographyTitle',
      modalObsession: 'obsession',
      modalLanguages: 'languages',
      modalLocation: 'location',
      modalPets: 'pets',
    };

    const spanIdMapping = {

      modalUsername:'generalUsername',
      modalEmail: 'generalEmail',
      modalBirthDate: 'generalBirthDate',
      modalWork: 'generalWork',
      modalFunFact: 'generalFunFact',
      modalFavoriteSong: 'generalFavoriteSong',
      modalUselessSkill: 'generalUselessSkill',
      modalSchool: 'generalSchool',
      modalSpendingHabit: 'generalSpendingHabit',
      modalBiographyTitle: 'generalBiographyTitle',
      modalObsession: 'generalObsession',
      modalLanguages: 'generalLanguages',
      modalLocation: 'generalLocation',
      modalPets: 'generalPets',

    };



    // Function to generate modal HTML
    function generateModal(modalData) {
      const initialCharCount = modalData.value.length;

      return `
        <div class="modal fade custom-modal-slide" id="${modalData.id}" tabindex="-1" aria-labelledby="${modalData.id}Label" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="${modalData.id}Label">${modalData.title}</h5>
                <button  type="button" class="btn-close close-top-bottom" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <label class="form-label" for="${modalData.inputId}" id="${modalData.inputId}Label">${modalData.label}</label>
                <input class="form-control ${modalData.inputClass}" type="text" name="user[${modalData.inputId}]" id="${modalData.inputId}" value="${modalData.value}"  ${modalData.maxLength ? `maxlength="${modalData.maxLength}"` : 'maxlength="40"'} required>
                <div class="character-count">
                  <span class="${modalData.counterClass}" id="currentCharCount-${modalData.inputId}">${initialCharCount}</span>/<span id="maxCharCount-${modalData.inputId}">${modalData.maxLength || '40'}</span>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary modal-save-button" data-bs-dismiss="modal" id="save${modalData.inputId}Button" data-modal-input="${modalData.inputId}">Save</button>
              </div>
            </div>
          </div>
        </div>
      `;
    }




    // Function to add modals to the container
    function addModalsToContainer() {
      const modalContainer = document.getElementById('modalContainer');
      console.log('Adding modals...');

      // Loop through each modal
      modals.forEach((modalData) => {
        console.log(`Setting up modal for ${modalData.inputId}`);

        const modalHTML = generateModal(modalData);
        modalContainer.innerHTML += modalHTML;

        // Select the input field(s) with class 'input-form'
        const inputFields = document.querySelectorAll(`.${modalData.inputClass}`);

        // Select the counter element(s) with class 'modal-character-count'
        const counterElements = document.querySelectorAll(`.${modalData.counterClass}`);

        // Now, you can work with inputFields and counterElements
        // For example, if there are multiple input fields and counters, you can loop through them:
        inputFields.forEach((inputField, index) => {
          const counterElement = counterElements[index]; // Get the corresponding counter element

          // Add event listener to update character count
          inputField.addEventListener('input', (e) => {
            counterElement.textContent = `${e.target.value.length}`;
          });

          // You can also use these elements for other purposes related to this modal
        });
      });



      // Select all elements with the class 'modal-save-button'
      const saveButtons = document.querySelectorAll('.modal-save-button');

      // Loop through each save button and add an event listener
      saveButtons.forEach(function (saveButton) {
        saveButton.addEventListener('click', function () {
          // Find the associated modalData
          const modalId = saveButton.getAttribute('data-modal-input');
          const modalData = modals.find(data => data.inputId === modalId);

          if (!modalData) {
            console.log('Error: Modal data not found for button');
            return;
          }
          console.log(`Clicked button ID: ${saveButton.id}`);
          console.log(`Extracted modal ID: ${modalId}`);
          console.log(`Matching modal data: ${modalData.inputId}`);

          console.log(`Save button clicked for ${modalData.inputId}`);

          const newValue = document.getElementById(`${modalData.inputId}`).value;

          // Log the new value to the console
          console.log(`New value for ${modalData.label}: ${newValue}`);

          // Update the input value and span content based on the mapping
          const mappedInputId = inputIdMapping[modalData.inputId];
          const inputField = document.getElementById(mappedInputId);

          if (inputField) {
            inputField.value = newValue;
            console.log(`Updated inputField (${mappedInputId}) value: ${inputField.value}`);

          } else {
            console.log(`Input field not found for ${modalData.inputId}`);
          }

          const mappedSpanId = spanIdMapping[modalData.inputId];
          const spanField = document.getElementById(mappedSpanId); // Use mappedSpanId here

          if (spanField) {
            spanField.textContent = newValue;
            console.log(`Updated spanField (${spanField.id}) content: ${spanField.textContent}`);
          } else {
            console.log(`Span field not found for ${modalData.inputId}`);
          }
          // Now, update the character count in both the modal and the profile page
        });
      });

    }


    // Initialize variables to store the initial content and the modal element
    let initialContent = '';
    let addIntroModal = null;
    let aboutYouTextarea = null; // Declare aboutYouTextarea in the global scope
    let modal = null; // Declare modal in the global scope


    // Attach an event listener to show the full text when "Read more" is clicked
    const readMoreLink = document.getElementById('readMoreLink');
    readMoreLink.addEventListener('click', function () {
      const aboutYouTextarea = document.getElementById('aboutYou');
      const introTextDisplay = document.getElementById('introTextDisplay');
      const introText = aboutYouTextarea.value;

      introTextDisplay.textContent = introText;
      readMoreLink.style.display = 'none';
      readLessLink.style.display = 'inline-block'; // Show "Read less" link

    });

    // Attach an event listener to show the truncated text when "Read less" is clicked
    const readLessLink = document.getElementById('readLessLink');
    readLessLink.addEventListener('click', function () {
      const aboutYouTextarea = document.getElementById('aboutYou');
      const introTextDisplay = document.getElementById('introTextDisplay');
      const introText = aboutYouTextarea.value;

      // Check if text exceeds 250 characters for truncation
      if (introText.length > 250) {
        introTextDisplay.textContent = introText.substring(0, 250) + '...';
        readMoreLink.style.display = 'inline-block'; // Show "Read more" link
      } else {
        readMoreLink.style.display = 'none'; // Hide "Read more" link if not needed
      }

      readLessLink.style.display = 'none'; // Hide "Read less" link
    });

    // Function to update the intro text display and links
    function updateIntroTextDisplayAndLinks() {
      const aboutYouTextarea = document.getElementById('aboutYou');
      const introDisplay = document.getElementById('introDisplay');
      const introTextDisplay = document.getElementById('introTextDisplay');
      const addIntroLink = document.getElementById('addIntroLink');
      const editIntroLink = document.getElementById('editIntroLink');
      const emptyTextareaLabel = document.getElementById('emptyTextareaLabel');


      if (aboutYouTextarea) {
        const introText = aboutYouTextarea.value;
        introTextDisplay.textContent = introText;

        if (introText.trim() === '') {
          introDisplay.style.border = '2px dotted #b7b7b7';
          introDisplay.style.borderRadius = '1rem';
          introDisplay.style.padding = '2rem';
          emptyTextareaLabel.style.display = 'block';
          emptyTextareaLabel.style.color = '#a1a0a0';

          // Show "Add Intro" link and hide "Edit Intro" link
          addIntroLink.style.display = 'inline-block';
          editIntroLink.style.display = 'none';
          readMoreLink.style.display = 'none';

        } else {
          introDisplay.style.border = 'none';
          introDisplay.style.borderRadius = 'none';
          introDisplay.style.padding = '0';
          emptyTextareaLabel.style.display = 'none';
          emptyTextareaLabel.style.color = 'none';

          // Hide "Add Intro" link and show "Edit Intro" link
          addIntroLink.style.display = 'none';
          editIntroLink.style.display = 'inline-block';

          // Check if text exceeds 250 characters for truncation
          if (introText.length > 250) {
            introTextDisplay.textContent = introText.substring(0, 250) + '...';
            readMoreLink.style.display = 'inline-block';
          } else {
            readMoreLink.style.display = 'none';
          }
        }
      }
    }






    // Separate function to handle the "Save" button click for the intro modal textarea
    function handleIntroModalSave() {
      if (aboutYouTextarea) { // Check if aboutYouTextarea is defined
        const introTextarea = document.getElementById('introTextarea'); // Update this to match your modal textarea ID
        const introText = introTextarea.value;

        // Update the character count
        const currentCharCount = document.getElementById('currentCharCount');
        const maxCharCount = document.getElementById('maxCharCount');
        currentCharCount.textContent = introText.length;

        // Update the content of the general form's textarea
        aboutYouTextarea.value = introText;
        updateIntroTextDisplayAndLinks(); // Update the display below the heading

        // Hide the modal
        modal.hide();
      }
    }

    // Function to create and show the modal
    function createAndShowModal() {
      // Get the content from the general form's textarea
      aboutYouTextarea = document.getElementById('aboutYou'); // Assign the value here
      initialContent = aboutYouTextarea.value;

      // Get the initial character count
       const initialCharCount = initialContent.length;

      // Create the modal element if it doesn't exist
      if (!addIntroModal) {
        addIntroModal = document.createElement('div');
        addIntroModal.className = 'modal fade custom-modal-slide';
        addIntroModal.innerHTML = `
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Add Intro</h5>
                <button id="close-modal-button" type="button" class="btn-close close-top-bottom" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <label class="form-label" for="introTextarea">Intro</label>
                <textarea class="form-control" id="introTextarea" rows="4" placeholder="Write your intro here...">${initialContent}</textarea>
                <div class="character-count">
                  <span id="currentCharCount">${initialCharCount}</span>/<span id="maxCharCount">500</span>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary modal-save-button" id="saveIntroButton">Save</button>
              </div>
            </div>
          </div>
        `;

        // Append the modal to the document body
        document.body.appendChild(addIntroModal);

        // Initialize the modal using Bootstrap
        modal = new bootstrap.Modal(addIntroModal);
      }

      // Show the modal
      modal.show();

      // Add an input event listener to the textarea for real-time character count
      const introTextarea = document.getElementById('introTextarea');
      const currentCharCount = document.getElementById('currentCharCount');
      const maxCharCount = document.getElementById('maxCharCount');

      introTextarea.addEventListener('input', function () {
        const introText = introTextarea.value;
        currentCharCount.textContent = introText.length;

        // Check if the character count exceeds the maximum limit (500)
        if (introText.length > 500) {
          // If the character count is greater than 500, truncate the text to 500 characters
          introTextarea.value = introText.substring(0, 500);
          currentCharCount.textContent = 500; // Update the character count display to 500
        }
      });
    }

    // Add an event listener to open the intro modal when the "Add Intro" link is clicked
    const addIntroLink = document.getElementById('addIntroLink');
    addIntroLink.addEventListener('click', function(event) {
      event.preventDefault(); // Prevent the default behavior of the link (e.g., navigating to a new page)
      createAndShowModal();

      // Assign the handleIntroModalSave function to the "Save" button click event
      const saveIntroButton = document.getElementById('saveIntroButton');
      saveIntroButton.addEventListener('click', handleIntroModalSave);
    });


    // Add an event listener to open the intro modal when the "Edit Intro" link is clicked
    const editIntroLink = document.getElementById('editIntroLink');
    editIntroLink.addEventListener('click', function(event) {
      event.preventDefault(); // Prevent the default behavior of the link (e.g., navigating to a new page)
      createAndShowModal(); // Open the modal when the link is clicked

      // Initialize the modal using Bootstrap if it's not already initialized
      if (!modal) {
        modal = new bootstrap.Modal(addIntroModal);
      }

      // Assign the handleIntroModalSave function to the "Save" button click event
      const saveIntroButton = document.getElementById('saveIntroButton');
      saveIntroButton.addEventListener('click', handleIntroModalSave);
    });


    // Add an event listener to close the modal with animation
    const closeButtons = document.querySelectorAll('.modal-dialog > .close-top-bottom');

    closeButtons.forEach(function (closeButton) {
      closeButton.addEventListener('click', function () {
        const modal = closeButton.closest('.modal');

        // Add CSS styles to animate the modal closing from top to bottom
        modal.style.transition = 'transform 0.3s ease-out, opacity 0.3s ease-out';
        modal.style.transform = 'translateY(-100%)';
        modal.style.opacity = '0';

        // After a delay (adjust as needed), remove the modal
        setTimeout(function () {
          modal.remove();
        }, 300); // 300 milliseconds matches the transition duration
      });
    });



    // Call the function initially to set the label's initial state
    updateIntroTextDisplayAndLinks();
    // Add modals to the container
    addModalsToContainer();


  });

</script>
