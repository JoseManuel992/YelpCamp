<% layout("./layouts/boilerplate") %>
<div id="cluster-map"></div>
<h1>All Campgrounds</h1>
<div>
  <a href="/campgrounds/new" class=" button-add-campground">Add Campground</a>
</div>
<div id="campgroundsContainer">
  <% for (let campground of campgrounds) { %>
      <div class="card mb-3">
        <div class="row">
          <div class="col-md-4">
            <% if(campground.images.length) { %>
              <img crossorigin="anonymous" class="img-fluid card-img-size-campground" alt="" src="<%= campground.images[0].url %>">
            <% } else{%>
              <img crossorigin="anonymous" class="img-fluid card-img-size-campground" alt="" src="https://res.cloudinary.com/dsb9ybqqc/image/upload/v1689866175/YelpCamp/dgtcroxltbzn62nlodgo.jpg">
            <% } %>
          </div>
          <div class="col-md-8">
            <div class="card-body">
              <h5 class="card-title"> <%=  campground.title %> </h5>
              <p class="card-text"><%=  campground.description %></p>
              <p class="card-text">
                <small class="text-muted"><%=  campground.location %></small>
              </p>
              <a class="btn btn-primary" href="/campgrounds/<%=campground._id %>">View <%=  campground.title %></a>
            </div>
          </div>
        </div>
      </div>
  <% } %>
</div>
<% if (!isPhoneSize) { %>
    <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
      <% const numLinksToShow = isPhoneSize ? 3 : 5; // Number of page links to show at a time %>
      <% const halfNumLinks = Math.floor(numLinksToShow / 2); %>
      <% const startPage = Math.max(currentPage - halfNumLinks, 1); %>
      <% const endPage = Math.min(startPage + numLinksToShow - 1, totalPages); %>

      <!-- Add Previous link -->
      <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
        <a id="previousLink" class="page-link" href="<%= currentPage === 1 ? '#' : '?page=' + (currentPage - 1) %>" <% if (currentPage === 1) { %> tabindex="-1" aria-disabled="true" <% } %>>&laquo; Previous</a>
      </li>

      <% if (startPage > 1) { %>
        <li class="page-item">
          <a class="page-link" href="?page=1">1</a>
        </li>
        <% if (startPage > 2) { %>
          <li class="page-item disabled">
            <span class="page-link">...</span>
          </li>
        <% } %>
      <% } %>

      <% for (let i = startPage; i <= endPage; i++) { %>
        <li class="page-item <%= currentPage == i ? 'active' : '' %>">
          <a class="page-link" href="?page=<%= i %>"><%= i %></a>
        </li>
      <% } %>

      <% if (endPage < totalPages) { %>
        <% if (endPage < totalPages - 1) { %>
          <li class="page-item disabled">
            <span class="page-link">...</span>
          </li>
        <% } %>
        <li class="page-item">
          <a class="page-link" href="?page=<%= totalPages %>"><%= totalPages %></a>
        </li>
      <% } %>

      <!-- Add Next link -->
      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
        <a id="nextLink" class="page-link" href="<%= currentPage === totalPages ? '#' : '?page=' + Math.min(totalPages, parseInt(currentPage) + 1) %>"> Next &gt; </a>
      </li>

    </ul>
  </nav>
<% } %>


<script>
  const mapToken = "<%-process.env.MAPBOX_TOKEN %>";
  const campgrounds = { features: <%- JSON.stringify(allCampgrounds) %> }

  // JavaScript for detecting phone size and setting up infinite scroll
  document.addEventListener('DOMContentLoaded', () => {
    if (window.innerWidth <= 576 && !window.location.href.includes('isPhoneSize=true')) {
      window.location.href = window.location.href + (window.location.href.includes('?') ? '&' : '?') + 'isPhoneSize=true';
    }


    // Check if window size is less or equal to 576px (phone size)
    if (window.innerWidth <= 576) {
      let currentPage = <%= currentPage %>;
      const totalPages = <%= totalPages %>;

      // Function to append new campgrounds
      const appendCampgrounds = (campgrounds) => {
        const container = document.getElementById('campgroundsContainer');
        campgrounds.forEach(campground => {
          console.log(campground);
          // Create new campground element and append to the container
          const item = document.createElement('div');
          item.className = "card mb-3";



          const image = document.createElement('img');
        image.className = 'card-img-top';
        image.style.height = '16rem';
        image.style.width = '100%';
        image.style.objectFit = 'cover';
        if (campground.images && campground.images.length > 0) {
          image.src = campground.images[0].url; // First image URL
          item.appendChild(image);
        }

          const cardBody = document.createElement('div');
          cardBody.className = "card-body";

          const title = document.createElement('h5');
          title.className = "card-title";
          title.textContent = campground.title;

          const description = document.createElement('p');
          description.className = "card-text";
          description.textContent = campground.description;

          const location = document.createElement('p');
          location.className = 'card-text text-muted';
          location.textContent = `Location: ${campground.location}`;
          location.style.marginBottom = '1rem';



          const btn = document.createElement('a');
          btn.className = "btn btn-primary";
          btn.href = "/campgrounds/" + campground._id;
          btn.textContent = "View " + campground.title;

          cardBody.appendChild(title);
          cardBody.appendChild(description);
          cardBody.appendChild(location);
          cardBody.appendChild(btn);


          item.appendChild(cardBody);
          container.appendChild(item);
        });
      };


      let page = 1;  // Keeps track of the current page

      const loadCampgrounds = async () => {
        page += 1;
        const response = await fetch(`/campgrounds?isPhoneSize=true&isJson=true&page=${page}`);
        const { campgrounds, totalPages } = await response.json();

        appendCampgrounds(campgrounds);

        if (page >= totalPages) {
          window.removeEventListener('scroll', handleScroll);  // If we've loaded all pages, stop trying to load more
        }
      };


      // Infinite scroll listener
      const handleScroll = () => {
        if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
          loadCampgrounds();
        }
      };

      window.addEventListener('scroll', handleScroll);

    }
  });

  // JavaScript event handler to prevent default behavior when "Previous" link is clicked on the first page
  const previousLink = document.querySelector('.page-item.disabled a.page-link');
  if (previousLink) {
    previousLink.addEventListener('click', function(event) {
      event.preventDefault();
    });

  }

  // JavaScript event handler to prevent default behavior when "Next" link is clicked on the last page
  const nextLink = document.getElementById('nextLink');
  if (nextLink) {
    nextLink.addEventListener('click', (event) => {
      // Parse currentPage and totalPages as integers before the comparison
      const currentPage = parseInt("<%= currentPage %>");
      const totalPages = parseInt("<%= totalPages %>");

      // If the current page is the last page, prevent the default behavior (page refresh)
      if (currentPage === totalPages) {
        event.preventDefault();
      }
    });
  }

</script>

<script src="/javascripts/clusterMap.js"></script>
