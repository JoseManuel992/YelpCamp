
<% layout("./layouts/boilerplate") %>

<div id="cluster-map"></div>
<h1>All Campgrounds</h1>

<div>
  <a href="/campgrounds/new" class=" button-add-campground">Add Campground</a>
</div>

<div id="campgroundsContainer">
  <% for (let campground of campgrounds) { %>
      <div class="card mb-3">
        <div class="row">
          <div class="col-md-4">
            <% if(campground.images.length) { %>
              <img crossorigin="anonymous" class="img-fluid card-img-size-campground" alt="" src="<%= campground.images[0].url %>">
            <% } else{%>
              <img crossorigin="anonymous" class="img-fluid card-img-size-campground" alt="" src="https://res.cloudinary.com/dsb9ybqqc/image/upload/v1689866175/YelpCamp/dgtcroxltbzn62nlodgo.jpg">
            <% } %>
          </div>
          <div class="col-md-8">
            <div class="card-body">
              <h5 class="card-title"> <%=  campground.title %> </h5>
              <p class="card-text"><%=  campground.description %></p>
              <p class="card-text">
                <small class="text-muted"><%=  campground.location %></small>
              </p>
              <a class="btn btn-primary" href="/campgrounds/<%=campground._id %>">View <%=  campground.title %></a>
            </div>
          </div>
        </div>
      </div>
  <% } %>
</div>

<h2 id="showMoreCamgroundsTitle">Continue exploring Campgrounds</h2>
<div id="showMoreContainer">
  <button id="showMoreButton">Show More</button>
</div>

<nav aria-label="Page navigation">
  <ul class="pagination justify-content-center">
    <% const numLinksToShow = 5; // Number of page links to show at a time %>
    <% const halfNumLinks = Math.floor(numLinksToShow / 2); %>
    <% const startPage = Math.max(currentPage - halfNumLinks, 1); %>
    <% const endPage = Math.min(startPage + numLinksToShow - 1, totalPages); %>

    <!-- Add Previous link -->
    <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
      <a id="previousLink" class="page-link" href="<%= parseInt(currentPage) === 1 ? '#' : '?page=' + (currentPage - 1) %>" <% if (parseInt(currentPage) === 1) { %> tabindex="-1" aria-disabled="true" <% } %>>&laquo; Previous</a>
    </li>

    <% if (startPage > 1) { %>
      <li class="page-item">
        <a class="page-link" href="?page=1">1</a>
      </li>
      <% if (startPage > 2) { %>
        <li class="page-item disabled">
          <span class="page-link">...</span>
        </li>
      <% } %>
    <% } %>

    <% for (let i = startPage; i <= endPage; i++) { %>
      <li class="page-item <%= currentPage == i ? 'active' : '' %>">
        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
      </li>
    <% } %>

    <% if (endPage < totalPages) { %>
      <% if (endPage < totalPages - 1) { %>
        <li class="page-item disabled">
          <span class="page-link">...</span>
        </li>
      <% } %>
      <li class="page-item">
        <a class="page-link" href="?page=<%= totalPages %>"><%= totalPages %></a>
      </li>
    <% } %>

    <!-- Add Next link -->
    <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
      <a id="nextLink" class="page-link" href="<%= parseInt(currentPage) === totalPages ? '#' : '?page=' + Math.min(totalPages, parseInt(currentPage) + 1) %>"> Next &raquo; </a>
    </li>

  </ul>
</nav>



<script>
  const mapToken = "<%-process.env.MAPBOX_TOKEN %>";
  const campgrounds = { features: <%- JSON.stringify(allCampgrounds) %> }

  document.addEventListener('DOMContentLoaded', () => {

    // JavaScript event handler to prevent default behavior when "Previous" link is clicked on the first page
    const previousLink = document.getElementById('previousLink');
    if (previousLink) {
      // Parse currentPage as integer before the comparison
      const currentPage = parseInt("<%= currentPage %>");

      // If the current page is the first page, prevent the default behavior (page refresh) and disable the button
      if (currentPage === 1) {
        previousLink.addEventListener('click', function(event) {
          event.preventDefault();
        });
        // Disable the "Previous" link
        previousLink.classList.add('disabled');

      } else {
        // Enable the "Previous" link if the current page is not the first page
          previousLink.classList.remove('disabled');
      }
    }

    // JavaScript event handler to prevent default behavior when "Next" link is clicked on the last page
    const nextLink = document.getElementById('nextLink');
    if (nextLink) {
      // Parse currentPage and totalPages as integers before the comparison
      const currentPage = parseInt("<%= currentPage %>");
      const totalPages = parseInt("<%= totalPages %>");

      // If the current page is the last page, prevent the default behavior (page refresh) and disable the button
      if (currentPage === totalPages) {
        nextLink.addEventListener('click', function(event) {
          event.preventDefault();
        });

        // Disable the "Next" link
        nextLink.classList.add('disabled');
      } else {
        // Enable the "Next" link if the current page is not the last page
        nextLink.classList.remove('disabled');
      }
    }

    // Check if window size is less or equal to 576px (phone size)
    if (window.innerWidth <= 576) {
      let fetchedCampgrounds = 10; // Keeps track of the number of fetched campgrounds
      const perPage = 10; // Number of campgrounds per fetch request
      document.querySelector('.pagination').style.display = 'none'; // Hide pagination

      // Function to reveal each campground card with a delay
      let index = 0; // Define index here
      const delay = 100; // Adjust the delay value as needed (100ms here)

      const revealNextCampground = (container, delay) => {
        const campground = campgrounds[index];
        if (!campground) {
          // All campgrounds are revealed, show the container
          container.style.display = 'block';
          return;
        }

        const item = container.children[index];
        item.classList.remove('hidden'); // Reveal the campground card
        item.classList.add('reveal'); // Add the "reveal" class to gradually make the card visible

        index++; // Move to the next campground
        setTimeout(revealNextCampground, delay); // Schedule the next reveal

      };

      // Function to append new campgrounds
      const appendCampgrounds = (campgrounds) => {
        const container = document.getElementById('campgroundsContainer');

        campgrounds.forEach(campground => {
          // console.log(campground);
          // Create new campground element and append to the container
          const item = document.createElement('div');
          item.className = "card mb-3";

          const image = document.createElement('img');
          image.className = 'card-img-top';
          image.style.height = '16rem';
          image.style.width = '100%';
          image.style.objectFit = 'cover';
          if (campground.images && campground.images.length > 0) {
            image.src = campground.images[0].url; // First image URL
            item.appendChild(image);
          }

          const cardBody = document.createElement('div');
          cardBody.className = "card-body";

          const title = document.createElement('h5');
          title.className = "card-title";
          title.textContent = campground.title;

          const description = document.createElement('p');
          description.className = "card-text";
          description.textContent = campground.description;

          const location = document.createElement('p');
          location.className = 'card-text text-muted';
          location.textContent = `Location: ${campground.location}`;
          location.style.marginBottom = '1rem';

          const btn = document.createElement('a');
          btn.className = "btn btn-primary";
          btn.href = "/campgrounds/" + campground._id;
          btn.textContent = "View " + campground.title;

          cardBody.appendChild(title);
          cardBody.appendChild(description);
          cardBody.appendChild(location);
          cardBody.appendChild(btn);

          item.appendChild(cardBody);
          container.appendChild(item);

        });

      };

      const loadCampgrounds = async (container) => {
        console.log('loadCampgrounds called');

        try {
          // Calculate the number of campgrounds to skip (first 10 campgrounds)
          const skip = fetchedCampgrounds;

          // Fetch campgrounds with the "skip" parameter to skip the initial campgrounds
          const response = await fetch(`/campgrounds?isJson=true&skip=${fetchedCampgrounds}&limit=${perPage}`);

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const { campgrounds } = await response.json();
          console.log('Received response:', response, 'Campgrounds:', campgrounds);

          fetchedCampgrounds += campgrounds.length;
          appendCampgrounds(campgrounds);

          if (campgrounds.length < perPage) {
            document.getElementById('showMoreButton').disabled = true;
          }

        } catch (error) {
          console.error('An error occurred while fetching the campgrounds:', error);
        }
      };

      document.getElementById('showMoreButton').addEventListener('click', () => {
        const container = document.getElementById('campgroundsContainer');
        loadCampgrounds(container);
      });

      // loadCampgrounds(document.getElementById('campgroundsContainer'));  Load the initial set of 10 campgrounds autmatically to the index page,
      // I comment it out if I want to have this but I prefer to load each time I press the button show more

      revealNextCampground(document.getElementById('campgroundsContainer'), delay);
    }
  });

</script>

<script src="/javascripts/clusterMap.js"></script>
