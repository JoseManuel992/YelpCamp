
<% layout("./layouts/boilerplate") %>
<link rel="stylesheet" href="/stylesheets/stars.css">


<div class="row">
  <div class="col-md-6 ">

    <!-- carousel -->
    <div id="campgroundCarousel" class="carousel slide carousel-fade" data-bs-ride="carousel">
      <div class="carousel-inner">
        <% campground.images.forEach((img, i) => {%>
          <div class="carousel-item <%= i === 0 ? "active" :  "" %>">
            <img crossorigin="anonymous" src="<%= img.url  %>" class="d-block w-100 fixed-size-image" alt="">
          </div>
        <% }) %>
      </div>
      <%  if(campground.images.length > 1) {%>
        <button class="carousel-control-prev" type="button" data-bs-target="#campgroundCarousel" data-bs-slide="prev">
          <i class="fa-solid fa-angle-left" aria-hidden="true"></i>
          <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#campgroundCarousel" data-bs-slide="next">
          <i class="fa-solid fa-chevron-right" aria-hidden="true"></i>
          <span class="visually-hidden"> <i class="fa-solid fa-angle-right" style="color: #000000;"></i></span>
        </button>
      <% } %>
      <!-- indicators inside the carousel -->
      <div class="carousel-indicators-container">
        <ol class="carousel-indicators">
          <% for(let i=0; i < campground.images.length; i++) { %>
            <li data-bs-target="#campgroundCarousel" data-bs-slide-to="<%= i %>" class="<%= i === 0 ? 'active' : '' %>"></li>
          <% } %>
        </ol>
      </div>
    </div>

    <div class="card CampgroundCardShowPage">
      <div class="card-body">
        <h5 class="card-title"><%= campground.title  %></h5>
        <p class="card-text"><%= campground.description  %></p>
      </div>
      <ul class="list-group list-group-flush">
        <li class="list-group-item text-muted"><%= campground.location  %></li>
        <li class="list-group-item"> Submitted by <%= campground.author.username  %></li>
        <li class="list-group-item">$<%= campground.price  %>/night</li>
      </ul>
      <% if(currentUser && campground.author.equals(currentUser._id)){ %>
        <div class="card-body">
          <a class="card-link btn btn-info text-white" href="/campgrounds/<%= campground._id  %>/edit" class="card-link">Edit</a>
          <form class="d-inline" action="/campgrounds/<%= campground._id %>?_method=DELETE" method="POST">
            <button class="btn btn-danger">Delete</button>
          </form>
        </div>
      <% } %>
      <div class="card-footer text-body-secondary">
        <a class="backtoallcampgrounds" href="/campgrounds"><i class="fa-solid fa-circle-arrow-left" style="color: #000000;"></i> Back To All Campgrounds</a>
      </div>
    </div>
  </div>

  <div class="col-md-6">

    <div id='map'></div>

     <!-- Average Rating Display -->
     <div class="averageCampgroundRating">
        <% if(typeof averageRating !== 'undefined' && campground.reviews.length > 0) { %>
            <div class="average-rating-section">
              <h3><i class="fa-solid fa-star" style="color: #000;"></i> <%= averageRating.toFixed(1) %> <i class="fas fa-circle custom-dot"></i>  <%= campground.reviews.length %> reviews</h3>
              <!-- You can add a visual representation of the rating using stars or other symbols if you want -->
            </div>
        <% } %>
      </div>

    <% if(currentUser) { %>
      <h2>Leave a Review</h2>
      <div class="my-4">
        <% if (messages && messages.error) { %> <!-- Check if messages.error exists -->
          <div class="alert alert-danger" role="alert">
            <%= messages.error %>
          </div>
          <% } %>
        <form action="/campgrounds/<%= campground._id  %>/reviews" method="POST" class="validated-form" novalidate>
          <fieldset class="starability-heartbeat">
            <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="0" checked aria-label="No rating." />
            <input type="radio" id="first-rate1" name="review[rating]" value="1" />
            <label for="first-rate1" title="Terrible">1 star</label>
            <input type="radio" id="first-rate2" name="review[rating]" value="2" />
            <label for="first-rate2" title="Not good">2 stars</label>
            <input type="radio" id="first-rate3" name="review[rating]" value="3" />
            <label for="first-rate3" title="Average">3 stars</label>
            <input type="radio" id="first-rate4" name="review[rating]" value="4" />
            <label for="first-rate4" title="Very good">4 stars</label>
            <input type="radio" id="first-rate5" name="review[rating]" value="5" />
            <label for="first-rate5" title="Amazing">5 stars</label>
          </fieldset>
      </div>
        <div class=" reviewTextCard">
          <label class="form-label" for="body">Review Text</label>
          <textarea class="form-control" name="review[body]" id="body" cols="30" rows="3" required></textarea>
          <div class="valid-feedback">
            Looks good!
          </div>
        </div>
        <button class="btn btn-info text-white btnSubmit">Submit</button>
      </form>
    <% } %>
  </div>

</div>

<div class="row">

 <!-- For mobile: Integrate the Swiper slider to show the reviews in the show page -->
 <div class="swiper-container d-block d-md-none">
    <div class="swiper-wrapper">

      <% for (let review of campground.reviews) { %>

        <%
          let date = new Date(review.createdAt);
          let monthNames = ["January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"];
          let formattedDate = monthNames[date.getMonth()] + " " + date.getFullYear();
        %>

        <div class="swiper-slide">
          <div class="col-md-6">
            <div class="card reviewCard">
              <div class="card-body">
                <div class="reviewCardImageAndTitlewithRatingstars">
                  <img src="<%= review.author.avatar.url %>" alt="Avatar of <%= review.author.username %>" class="avatar mr-3"> <!-- Added margin-right -->

                  <div>
                    <h5 class="card-title">
                      <%= review.author.username  %>
                    </h5>
                    <p><%= formattedDate %></p>
                  </div>
                </div>
                <p class="starability-result" data-rating="<%= review.rating %>">
                  Rated: <%= review.rating %> stars
                </p>
                <p class="card-text truncate-paragraph-showpage">
                    Review: <%= review.body  %>
                </p>
                <%  if( currentUser && review.author.equals(currentUser._id))  {%>
                  <form action="/campgrounds/<%=campground._id%>/reviews/<%=review._id%>?_method=DELETE" method="POST">
                    <button class="btn btn-sm btn-danger delete-review">Delete</button>
                  </form>
                <% } %>
                <% if (review && review.body && review.body.length > 4) { %>
                  <a href="#!" class="show-more-link" data-review-id="<%= review._id %>">Show more <i class="fa-solid fa-chevron-right" style="color: #000000; margin-left: 0.6rem; font-size: 1rem;"></i></a>
                <% } %>


              </div>
            </div>
          </div>
        </div>
      <% } %>

    </div>

  </div>

  <!-- For desktop: the display to show the reviews on the show page -->

  <div class="d-none d-md-block"> <!-- Hide for mobile and show only for desktop using Bootstrap classes -->
    <% let reviewCount = 0; %>
    <% for (let review of campground.reviews) { %>

      <!-- Stop the loop if 6 reviews are already displayed -->
      <% if(reviewCount >= 6) break; %>

      <% if (reviewCount % 2 === 0) { %>
        <div class="row">
      <% } %>

      <%
        let date = new Date(review.createdAt);
        let monthNames = ["January", "February", "March", "April", "May", "June",
          "July", "August", "September", "October", "November", "December"];
        let formattedDate = monthNames[date.getMonth()] + " " + date.getFullYear();
      %>

      <div class="col-md-6" id="review-<%= review._id %>">

        <div class="card reviewCard" >
          <div class="card-body">
            <div class="d-flex justify-content-between align-items-center">
              <!-- Avatar and Title -->
              <div class="reviewCardImageAndTitlewithRatingstars">
                <img src="<%= review.author.avatar.url %>" alt="Avatar of <%= review.author.username %>" class="avatar mr-3">
                <div>
                  <h5 class="card-title">
                    <%= review.author.username  %>
                  </h5>
                  <p><%= formattedDate %></p>
                </div>
              </div>

              <!-- Container for Ellipsis icon and Delete button -->
              <div class="ellipsis-container">
                <!-- Ellipsis icon for review actions -->
                <div class="review-actions">
                  <!-- Conditionally show the "Delete Review" button -->
                  <% if (currentUser && review.author.equals(currentUser._id)) { %>
                    <i class="fas fa-ellipsis-vertical ellipsis-icon ellipsis-review" data-review-id="<%= review._id %>"></i>
                    <form action="/campgrounds/<%=campground._id%>/reviews/<%=review._id%>?_method=DELETE" method="POST" class="delete-review-form" id="delete-review-form-<%= review._id %>" style="display: none;">
                      <button class="delete-reply"><i class="fa-solid fa-trash-can bin-reply-icon" style="color: #000000;"></i>Delete</button>
                    </form>
                  <% } %>
                </div>
              </div>
            </div>
            <p class="starability-result" data-rating="<%= review.rating %>">
              Rated: <%= review.rating %> stars
            </p>
            <p class="card-text truncate-paragraph-showpage">
              Review: <%= review.body  %>
            </p>




            <!-- Display replies for this review -->
            <div class="replies">
              <% for (let reply of review.replies) { %>
                <div class="reply">
                  <!-- Add a container for the icon and content -->
                  <div class="reply-container">
                    <!-- Display the reply author's avatar -->
                    <div class="reply-head">
                      <img src="<%= reply.author.avatar.url %>" alt="<%= reply.author.username %> Avatar" class="avatar">
                      <div>
                        <h5 class="card-title"><%= reply.author.username %></h5>
                        <p><%= formattedDate %></p>

                      </div>

                    </div>
                    <!-- Add the three dots icon here -->
                    <div class="dropdown">
                      <i class="fas fa-ellipsis-vertical ellipsis-icon" data-reply-id="<%= reply._id %>"></i>
                      <!-- Conditionally show the "Delete Reply" button -->
                      <% if (currentUser && reply.author.equals(currentUser._id)) { %>
                        <!-- Add a "Delete Reply" option -->
                        <form id="delete-form-<%= reply._id %>" action="/campgrounds/<%= campground._id %>/reviews/<%= review._id %>/replies/<%= reply._id %>?_method=DELETE" method="POST" class="delete-reply" style="display: none; position: absolute;">
                          <button class="delete-reply"><i class="fa-solid fa-trash-can bin-reply-icon" style="color: #000000;"></i>Delete</button>
                        </form>
                      <% } %>
                    </div>
                  </div>
                  <!-- Display the reply content here -->
                  <div class="reply-content">
                    <p>reply: <%= reply.text %></p>
                  </div>
                </div>
              <% } %>
            </div>



            <!-- Add a reply form for this review (restricted to campground author) -->
            <% if (currentUser && campground.author.equals(currentUser._id) && review.replies.length === 0) { %>
              <div class="reply-form-container">
                <div class="reply-form-container">
                  <div class="d-flex justify-content-between align-items-center">
                    <!-- Show more link -->
                    <% if(review.body.length > 4) { %>
                      <a href="#!" class="show-more-link" data-review-id="<%= review._id %>">Show more <i class="fa-solid fa-chevron-right" style="color: #000000; margin-left: 0.6rem; font-size: 1rem;"></i></a>
                    <% } %>

                    <!-- Only show the reply button if the user is the campground owner -->
                    <button class="btn reply-button" id="review-<%= review._id %>-reply">Reply</button>
                  </div>
                </div>

                <!-- Reply Form (initially hidden) -->
                <form action="/campgrounds/<%= campground._id %>/reviews/<%= review._id %>/replies" method="POST"
                  class="validated-form reply-form" novalidate id="review-<%= review._id %>-form" style="display: none;">

                  <div class="form-group">
                    <div class="reviewTextCard">
                      <label for="reply[body]">Reply:</label>
                      <textarea class="form-control" name="reply[text]" id="textarea-reply"
                      cols="30" rows="3" required></textarea>
                    </div>
                  </div>
                  <button
                    type="submit"
                    id="reply-submit-button"
                    class="btn btn-info text-white btnSubmit"
                    data-campground-id="<%= campground._id %>"
                  >
                    Submit Reply
                  </button>
                </form>
              </div>
            <% } %>

          </div>
        </div>

      </div>

      <% reviewCount++; %>
      <% if (reviewCount % 2 === 0 || reviewCount === campground.reviews.length) { %>
        </div>
      <% } %>

    <% } %>
  </div>


  <!-- Add a button for showing all reviews after the first six -->
  <div id="showAllReviewsContainer">
    <% if(campground.reviews.length > 6) { %>
      <button id="showAllReviews">Show all <%= campground.reviews.length %> reviews</button>
    <% } %>
  </div>


</div>

<!-- here is the modal structure to show all the reviews  -->
<div id="reviewsModal" class="reviews-modal">
  <div class="reviews-modal-content">
    <div class="sticky-header">
      <span id="close-modal-button" class="close-modal">&times;</span>
      <div class="search-container">
        <form id="localReviewSearch" action="#" method="post">
          <div class="search-box">
            <i class="fa-solid fa-magnifying-glass search-icon"></i>
            <input type="text" id="reviewSearch" placeholder="Search reviews" autocomplete="off">
            <i class="fa-solid fa-circle-xmark clear-icon" style="display: none"></i>
          </div>
        </form>

        <div class="search-result-message" style="display: none;">
          <span class="match-count"></span> <span class="review-word">reviews</span> mentioned "<span class="search-term"></span>"
        </div>
      </div>

    </div>

    <div class="modal-inner-content">

      <div class="cloned-reviews-container"></div>

      <div class="original-reviews-container">
        <% for (let review of campground.reviews) { %>

          <%
            let date = new Date(review.createdAt);
            let monthNames = ["January", "February", "March", "April", "May", "June",
              "July", "August", "September", "October", "November", "December"];
            let formattedDate = monthNames[date.getMonth()] + " " + date.getFullYear();
          %>

            <div class="card reviewCard review-card" id="review-content-<%= review._id %>"">

            <div class="card-body">
              <div class="reviewCardImageAndTitlewithRatingstars">
                <img src="<%= review.author.avatar.url %>" alt="Avatar of <%= review.author.username %>" class="avatar mr-3"> <!-- Added margin-right -->

                <div>
                  <h5 class="card-title">
                    <%= review.author.username  %>
                  </h5>
                  <p><%= formattedDate %></p>
                </div>
              </div>
              <p class="starability-result" data-rating="<%= review.rating %>">
                Rated: <%= review.rating %> stars
              </p>

              <p class="card-text">
                  Review: <%= review.body  %>
              </p>
              <%  if( currentUser && review.author.equals(currentUser._id))  {%>
                <form action="/campgrounds/<%=campground._id%>/reviews/<%=review._id%>?_method=DELETE" method="POST">
                  <button class="btn btn-sm btn-danger">Delete</button>
                </form>
              <% } %>
            </div>
          </div>
        <% } %>
      </div>

    </div>
  </div>
</div>



<script src="/javascripts/showPageValidateStarsRating.js"></script>


<script>
  const mapToken = "<%-process.env.MAPBOX_TOKEN %>";
  const campground = <%- JSON.stringify(campground) %>



  document.addEventListener('DOMContentLoaded', function() {

    const modal = document.getElementById('reviewsModal');
    const closeButton = document.getElementById('close-modal-button');
    const reviewSearch = document.getElementById('reviewSearch');
    const span = document.getElementsByClassName("close-modal")[0];
    const showMoreLinks = document.querySelectorAll('.show-more-link');
    const campgroundId = campground._id;

    // Add a click event listener for the "Show All Reviews" button and
    // Check if the "Show All Reviews" button exists
    const showAllButton = document.getElementById('showAllReviews');

    if (showAllButton) {
      showAllButton.addEventListener('click', function() {
       // Query for all cloned reviews within the modal
       let clonedReviews = document.querySelectorAll('.cloned-reviews-container .reviewCard');

        // Show all the reviews when the button is clicked
        clonedReviews.forEach(review => {
          review.style.display = 'block';
        });
      });
    }

    const originalReviewsContainer = document.querySelector('.original-reviews-container');

    originalReviewsContainer.querySelectorAll('.reviewCard').forEach((element, index) => {
      console.log(`Original review at index ${index} has id: ${element.id}`);
    });


    showMoreLinks.forEach(link => {
      link.addEventListener('click', function(event) {
        event.preventDefault();
        const reviewId = this.getAttribute('data-review-id');
        openModal(modal, originalReviewsContainer, reviewId); // Pass reviewId as the third argument
      });
    });



    initializeModalControls(modal, campgroundId);
    handleReviewSearch(reviewSearch);
    showMoreHandler();
    initializeSwiperCarousel();
    handleCarouselArrowHiding();
    handleDynamicCarouselIndicator(modal, closeButton, function() {
      const reviewSearchInput = document.getElementById('reviewSearch');
      const clearIcon = document.querySelector('.clear-icon');
      clearSearch(reviewSearchInput, clearIcon);
    });

     // Check if closeButton actually got an element
    if (closeButton) {
        closeButton.addEventListener('click', function() {
            const reviewSearchInput = document.getElementById('reviewSearch');
            const clearIcon = document.querySelector('.clear-icon');
            clearSearch(reviewSearchInput, clearIcon);
        });
    } else {
        console.error("Close button not found!");
    }

    // Event listener for clicking outside the modal

    attachModalEventListeners(modal, closeButton, clearSearch, campgroundId);
      showMoreLinks.forEach(link => {
      link.addEventListener('click', function(e) {
          e.preventDefault();

          const reviewId = this.getAttribute('data-review-id');
          displayReviewInModal(reviewId);

          // Open the modal
          document.getElementById('reviewsModal').style.display = 'block';
          setTimeout(() => {
              document.querySelector('.reviews-modal-content').classList.add('active');
          }, 10);

      });
    });

    const replyButtons = document.querySelectorAll('.reply-button');

    // Add a click event listener to each reply button
    replyButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Extract the reviewId from the button's id
        const reviewId = button.id.split('-')[1]; // Assumes the ID is in the format 'review-<reviewId>-reply'
        // Log the ID of the clicked reply button
        console.log(`Button with ID: ${button.id} clicked`);

        // Get the form ID from the button's ID
        const formId = `review-${reviewId}-form`;
        // Log the ID of the form
        console.log(`Form ID from button's ID: ${formId}`);
        // Get the corresponding form element
        const form = document.getElementById(formId);

      // Toggle the visibility of the form
        if (form.style.display === 'block') {
          form.style.display = 'none';
          console.log(`Hiding form with ID: ${formId}`);
        } else {
          form.style.display = 'block';
          console.log(`Showing form with ID: ${formId}`);
        }

      });
    });


    // Function to toggle the display of a delete form
    function toggleDeleteForm(formId) {
      const deleteForm = document.getElementById(formId);
      if (deleteForm.style.display === 'block') {
        deleteForm.style.display = 'none';
      } else {
        deleteForm.style.display = 'block';
      }
    }

    // Select all ellipsis icons for replies
    const ellipsisReplyIcons = document.querySelectorAll('.ellipsis-icon');

    // Loop through each ellipsis icon for replies and add a click event listener
    ellipsisReplyIcons.forEach(ellipsisIcon => {
      ellipsisIcon.addEventListener('click', () => {
        // Get the reply ID from the data-reply-id attribute
        const replyId = ellipsisIcon.getAttribute('data-reply-id');
        // Construct the form ID for deleting the reply
        const formId = `delete-form-${replyId}`;
        // Toggle the display of the delete form
        toggleDeleteForm(formId);
      });
    });

    // Select all ellipsis icons for reviews
    const ellipsisReviewIcons = document.querySelectorAll('.ellipsis-review');

    // Loop through each ellipsis icon for reviews and add a click event listener
    ellipsisReviewIcons.forEach(ellipsisIcon => {
      ellipsisIcon.addEventListener('click', () => {
        // Get the review ID from the data-review-id attribute
        const reviewId = ellipsisIcon.getAttribute('data-review-id');
        // Construct the form ID for deleting the review
        const formId = `delete-review-form-${reviewId}`;
        // Toggle the display of the delete form
        toggleDeleteForm(formId);
      });
    });

  });

  function initializeModalControls(modal, campgroundId) {
    // Check if the "Show All Reviews" button exists
    const btn = document.getElementById("showAllReviews");

    if (btn) {
      const span = document.getElementsByClassName("close-modal")[0];
      const originalReviewsContainer = document.querySelector('.original-reviews-container');

      btn.addEventListener('click', () => openModal(modal, originalReviewsContainer));
      span.addEventListener('click', () => closeModal(modal, campgroundId));

      document.getElementById('localReviewSearch').addEventListener('submit', (e) => {
        e.preventDefault();
      });
    }
  }




  function attachModalEventListeners(modal, closeButton, clearSearchFn, campgroundId) {
    // Wrap the clearSearch call in another function to ensure parameters are always passed.
    closeButton.addEventListener('click', function() {
        const reviewSearchInput = document.getElementById('reviewSearch');
        const clearIcon = document.querySelector('.clear-icon');
        clearSearchFn(reviewSearchInput, clearIcon);
    });

    modal.addEventListener('click', function(event) {
        if (event.target === modal) {
            const reviewSearchInput = document.getElementById('reviewSearch');
            const clearIcon = document.querySelector('.clear-icon');
            clearSearchFn(reviewSearchInput, clearIcon);
            closeModal(modal, campgroundId);
        }
    });
  }

  function openModal(modal, originalReviewsContainer, reviewIdToScroll) {
    modal.style.display = "block";
    setTimeout(() => {
      document.querySelector('.reviews-modal-content').classList.add('active');


      // Clone and append reviews while updating avatar image paths
      const clonedReviewsContainer = document.querySelector('.cloned-reviews-container');
      clonedReviewsContainer.innerHTML = ''; // Clear the container
      clonedReviewsContainer.scrollTop = 0; // Scroll to the top

      originalReviewsContainer.querySelectorAll('.reviewCard').forEach(originalReview => {
        const clonedReview = originalReview.cloneNode(true); // Clone the review
        const avatar = clonedReview.querySelector('.avatar'); // Get the avatar image
        const deleteButton = clonedReview.querySelector('.btn-danger'); // Get the delete button


        // Check if the user has a custom avatar image URL, and if not, use the default image URL
        const customAvatarUrl = avatar.getAttribute('src');
        if (!customAvatarUrl || customAvatarUrl === '/default-avatar.png') {
          // Set the default avatar image URL
          avatar.src = '/default-avatar.png'; // Replace with your default avatar URL
        }

        // Remove the delete button from the cloned review
        if (deleteButton) {
          deleteButton.remove();
        }
        clonedReviewsContainer.appendChild(clonedReview); // Append the cloned review
      });

      // Inside the openModal function, after setting the dynamic height:
      clonedReviewsContainer.querySelectorAll('.reviewCard').forEach(clonedReview => {
        const reviewContent = clonedReview.querySelector('.card-text');
        const contentHeight = reviewContent.scrollHeight;
        const spacing = 200; // You can adjust this value to control the spacing
        const totalHeight = contentHeight + spacing;
        console.log(`Review ID: ${clonedReview.id}, Dynamic Height: ${totalHeight}px`);
        clonedReview.style.height = `${totalHeight}px`;
      });

      document.body.classList.add('no-scroll');
    }, 10);
    // Call the updateUrl function to update the URL
    // updateUrl("showAllReviews", null);
  }

   // Function to handle closing the modal
   // Function to handle closing the modal
function closeModal(modal, campgroundId) {
  const modalContent = modal.querySelector('.reviews-modal-content');
  const reviewsModal = document.getElementById('reviewsModal'); // Select the reviewsModal div

  // Remove the 'active' class from modal content
  modalContent.classList.remove('active');

  // Apply the closing animation to the modal content
  modalContent.style.animation = 'slideDown 0.3s ease-out';
  modalContent.style.opacity = '0';


  // After the animation, reset styles and hide the modal
  setTimeout(() => {
    modalContent.style.animation = 'none'; // Reset animation
    modalContent.style.opacity = '1'; // Reset opacity

    // Hide the modal container and the reviewsModal div
    modal.style.display = 'none';
    reviewsModal.style.display = 'none';

    document.body.classList.remove('no-scroll'); // Enable scrolling on the main page
  }, 300); // Adjust the duration as needed

  // Clear the search input
  const reviewSearchInput = document.getElementById('reviewSearch');
  reviewSearchInput.value = '';

  // Manually trigger the input event on reviewSearch input to handle clear icon visibility
  const inputEvent = new Event('input', {
    'bubbles': true,
    'cancelable': true
  });
  reviewSearchInput.dispatchEvent(inputEvent);

  // Manually trigger the keyup event on reviewSearch input to reset reviews
  const keyupEvent = new Event('keyup', {
    'bubbles': true,
    'cancelable': true
  });
  reviewSearchInput.dispatchEvent(keyupEvent);

  // Update URL
  if (campgroundId) {
    history.replaceState({}, document.title, `/campgrounds/${campgroundId}`);
  }
}

  // function updateUrl(action, reviewId) {
  //   let baseUrl = window.location.origin + `/campgrounds/${campground._id}`; // replace 'yourCampgroundId' with the actual ID
  //   let currentParams = window.location.search;

  //   switch (action) {
  //       case "showMoreOnReview":
  //           history.pushState({}, '', baseUrl + "/reviews" + currentParams + "&scroll_to_review=" + reviewId);
  //           break;
  //       case "showAllReviews":
  //           history.pushState({}, '', baseUrl + "/reviews" + currentParams);
  //           break;
  //   }
  // }



  function cloneReviews(originalReviewsContainer) {
    const originalReviews = originalReviewsContainer.querySelectorAll('.reviewCard');
    const reviewsContainer = document.querySelector('.cloned-reviews-container');


    // Clear existing reviews in the modal
    while (reviewsContainer.firstChild) {
      reviewsContainer.removeChild(reviewsContainer.firstChild);
    }

    originalReviews.forEach((review, index) => {
        const clone = review.cloneNode(true);
        console.log(`Cloning review index: ${index}, id: ${review.id}`);
        console.log(`Cloned review has id: ${clone.id}`);
        reviewsContainer.appendChild(clone);
    });
    console.log(`Total number of reviews cloned: ${originalReviews.length}`);
  }

  function handleReviewSearch() {
    reviewSearch.addEventListener('keyup', searchReviews);

    reviewSearch.addEventListener('focus', () => {
      document.querySelector('.search-container').classList.add('focused');
    });

    reviewSearch.addEventListener('blur', () => {
      document.querySelector('.search-container').classList.remove('focused');
    });

    reviewSearch.addEventListener('input', toggleClearIcon);

    const clearIcon = document.querySelector('.clear-icon');
    clearIcon.addEventListener('click', () => {
        clearSearch(reviewSearch, clearIcon);
    });
  }

  function highlightMatches(element, searchTerm) {
    const regEx = new RegExp(`(${searchTerm})`, 'gi');
    const newText = element.innerHTML.replace(regEx, '<span class="highlight">$1</span>');
    element.innerHTML = newText;
  }

  function clearHighlights() {
    const clonedReviews = document.querySelectorAll('.cloned-reviews-container .reviewCard');
    clonedReviews.forEach(review => {
      review.innerHTML = review.innerHTML.replace(/<span class="highlight">([^<]+)<\/span>/gi, '$1');
    });
  }

  function searchReviews() {
    const searchTerm = reviewSearch.value.toLowerCase();

    // Clear previous highlights
    clearHighlights();

    const clonedReviews = document.querySelectorAll('.cloned-reviews-container .reviewCard');
    if (searchTerm.trim() === '') {
      // Hide the search result message
      document.querySelector('.search-result-message').style.display = 'none';

      // Show all reviews since the search term is empty
      clonedReviews.forEach(review => {
        review.style.display = '';
      });
      return;
    }

    // Highlight matches and show/hide reviews
    const clonedReviewTexts = document.querySelectorAll('.cloned-reviews-container .reviewCard .card-text');
    let matchCount = 0;

    clonedReviewTexts.forEach(reviewText => {
      const reviewContent = reviewText.textContent.toLowerCase();

      if (reviewContent.includes(searchTerm)) {
        reviewText.closest('.reviewCard').style.display = '';
        highlightMatches(reviewText, searchTerm);
        matchCount++;
      } else {
        reviewText.closest('.reviewCard').style.display = 'none';
      }
    });

    // Update the search result message based on matches
    if (matchCount > 0) {
      document.querySelector('.search-result-message .match-count').textContent = matchCount;
      document.querySelector('.search-result-message .search-term').textContent = searchTerm;

      const reviewWord = matchCount === 1 ? "review" : "reviews";
      document.querySelector('.search-result-message .review-word').textContent = reviewWord;

      document.querySelector('.search-result-message').style.display = 'block';
    } else {
      document.querySelector('.search-result-message').style.display = 'none';
    }
  }

  function toggleClearIcon() {
    const clearIcon = document.querySelector('.clear-icon');
    clearIcon.style.display = this.value ? 'block' : 'none';
  }

  function clearSearch(reviewSearchInput, clearIcon) {
    if (reviewSearchInput) {
        reviewSearchInput.value = '';
        // Dispatch the event once
        const event = new Event('keyup', {
            'bubbles': true,
            'cancelable': true
        });
        reviewSearchInput.dispatchEvent(event);
    } else {
        console.error("reviewSearchInput is not found");
    }

    if (clearIcon) {
        clearIcon.style.display = 'none';
    } else {
        console.error("clearIcon is not found");
    }

    // I'm assuming searchReviews() needs to be called once after the clear actions.
    // If not, remove the following line.
    searchReviews();
  }

  function showMoreHandler() {
    const showMoreLinks = document.querySelectorAll('.show-more-link');

    showMoreLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();


        const reviewId = this.getAttribute('data-review-id');
        displayReviewInModal(reviewId);


        // Add an event listener to the close button within the modal
        const closeModalButton = document.getElementById('close-modal-button');
        closeModalButton.addEventListener('click', () => {
          closeModal(reviewsModal);
        });


        setTimeout(() => {
          const reviewsModalContent = document.querySelector('.reviews-modal-content');

          // Reset the scrollbar to the top of the modal content
          const modalInnerContent = document.querySelector('.modal-inner-content');
          modalInnerContent.scrollTop = 0;

          reviewsModalContent.classList.add('active');

          // Scroll to the specific review content after a delay
          setTimeout(() => {
            const reviewContent = document.getElementById(`review-content-${reviewId}`);
            if (reviewContent) {
              const container = document.querySelector('.modal-inner-content');
              const containerOffset = container.offsetTop; // Offset of the container within the modal
              const reviewContentOffset = reviewContent.offsetTop - containerOffset;

              // Calculate the duration for smooth scrolling (constant duration)
              const scrollSpeed = 1.2; // Adjust this value for the desired speed
              const duration = Math.abs(reviewContentOffset - container.scrollTop) / scrollSpeed;

              let startTime = null;

              function animateScroll(timestamp) {
                if (!startTime) startTime = timestamp;
                const progress = timestamp - startTime;
                const percentage = Math.min(progress / duration, 1);

                container.scrollTop = container.scrollTop + (reviewContentOffset - container.scrollTop) * percentage;

                if (percentage < 1) {
                  window.requestAnimationFrame(animateScroll);
                } else {
                  // Scroll animation complete
                  // Call the updateUrl function to update the URL
                  // updateUrl("showMoreOnReview", reviewId);
                }
              }

              window.requestAnimationFrame(animateScroll);
            }
          }, 600); // Delay in milliseconds before scrolling starts
        }, 10);
      });
    });
  }


  function initializeSwiperCarousel() {
    const mySwiper = new Swiper('.swiper-container', {
      slidesPerView: 1,
      spaceBetween: 20,
      direction: 'horizontal',
      slidesPerView: 'auto',
      freeMode: true,
      pagination: {
        el: '.swiper-pagination',
      },
    });
  }

  function handleCarouselArrowHiding() {
    function handleFirstTab(e) {
      if (e.keyCode === 9) {
        document.body.classList.remove('using-mouse');
        window.removeEventListener('keydown', handleFirstTab);
        window.addEventListener('mousedown', handleMouseDownOnce);
      }
    }

    function handleMouseDownOnce() {
      document.body.classList.add('using-mouse');
      window.removeEventListener('mousedown', handleMouseDownOnce);
      window.addEventListener('keydown', handleFirstTab);
    }

    window.addEventListener('keydown', handleFirstTab);
    window.addEventListener('mousedown', handleMouseDownOnce);
  }

  function handleDynamicCarouselIndicator() {
    // dinamyc indicator for the carousel
    $(document).ready(function() {
      let $carousel = $('#campgroundCarousel');
      let $indicators = $('.carousel-indicators li');
      let totalIndicators = $indicators.length;

      // Limiting the indicators to a maximum of 5
      if (totalIndicators > 5) {
          // Display only 5 dots initially
          for(let i=5; i<totalIndicators; i++) {
            $indicators.eq(i).hide();
          }
          // Set initial classes for the last two indicators
          $indicators.eq(3).addClass('small');
          $indicators.eq(4).addClass('smallest');
      }

      $carousel.on('slide.bs.carousel', function (e) {
        let currentIndex = $(e.relatedTarget).index();
        $indicators.removeClass('small smallest').show();

        // If there are 5 or fewer images, no special adjustments required
        if (totalIndicators <= 5) return;  // No special logic for 5 or fewer indicators

          // When you are in the first three images
        if (currentIndex < 3) {
          for(let i=5; i<totalIndicators; i++) {
            $indicators.eq(i).hide();
          }
          $indicators.eq(3).addClass('small');
          $indicators.eq(4).addClass('smallest');
        }
          // When you slide to the 4th image onward, adjust the shown indicators
        else if (currentIndex >= 3 && currentIndex < totalIndicators - 2) {
          let start = currentIndex - 2;
          for(let i=0; i<start; i++) {
            $indicators.eq(i).hide();
          }
          for(let i=currentIndex+3; i<totalIndicators; i++) {
            $indicators.eq(i).hide();
          }
          $indicators.eq(currentIndex - 2).addClass('smallest');
          $indicators.eq(currentIndex - 1).addClass('small');
          $indicators.eq(currentIndex + 1).addClass('small');
          $indicators.eq(currentIndex + 2).addClass('smallest');
        }
          // When you're at the last two images, adjust the indicators
        else {
          for(let i=0; i<totalIndicators-5; i++) {
            $indicators.eq(i).hide();
          }
          $indicators.slice(-5).show();  // Show the last five indicators
          $indicators.eq(totalIndicators - 5).addClass('smallest');
          $indicators.eq(totalIndicators - 4).addClass('small');
        }

      });
    });

  }

  function displayReviewInModal(reviewId) {
    // Log the reviewId to confirm it's being passed correctly
    console.log("Review ID to display:", reviewId);

    // Open the modal and scroll to the review
    openModal(document.getElementById('reviewsModal'), document.querySelector('.original-reviews-container'), reviewId);


    // Clear existing reviews in the cloned reviews container
    const clonedReviewsContainer = document.querySelector('.cloned-reviews-container');
    clonedReviewsContainer.innerHTML = '';

    // Clone the target review and append it to the cloned reviews container
    const clonedTargetReview = document.querySelector(`.original-reviews-container #review-${reviewId}`);
    if (clonedTargetReview) {
        const clonedReview = clonedTargetReview.cloneNode(true);
        const avatar = clonedReview.querySelector('.avatar'); // Get the avatar image

        // Check if the user has a custom avatar image URL, and if not, use the default image URL
        const customAvatarUrl = avatar.getAttribute('src');
        if (!customAvatarUrl || customAvatarUrl === '/default-avatar.png') {
          // Set the default avatar image URL
          avatar.src = '/default-avatar.png'; // Replace with your default avatar URL
        }

        clonedReviewsContainer.appendChild(clonedReview); // Append the cloned review

        // Scroll to the cloned review
        setTimeout(() => {
            const offsetTop = clonedReview.offsetTop;
            if (clonedReview.previousElementSibling) {
                offsetTop -= clonedReview.previousElementSibling.offsetTop;
            }
            clonedReviewsContainer.scrollTop = offsetTop;
        }, 10);
    }

    // Open the modal
    const modal = document.getElementById('reviewsModal');
    modal.style.display = 'block';

    // Update the URL
    // updateUrl("showMoreOnReview", reviewId);
  }




</script>

<script src="/javascripts/showPageMap.js"></script>
